# main.py
import os, io, random, string, asyncio
from flask import Flask
from threading import Thread
from PIL import Image, ImageDraw, ImageFont
import discord
from discord.ext import commands

# ================== FLASK KEEP-ALIVE ==================
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ================== DISCORD BOT SETUP ==================
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ================== T·∫†O CAPTCHA ==================
def generate_captcha():
    text = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    img = Image.new('RGB', (200, 80), color=(255, 255, 255))
    d = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    d.text((50, 25), text, font=font, fill=(0, 0, 0))
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    buf.seek(0)
    return text, buf

# ================== S·ª∞ KI·ªÜN KHI BOT ONLINE ==================
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üìÅ Slash l·ªánh ƒë√£ ƒë·ªìng b·ªô ({len(synced)})")
    except Exception as e:
        print(f"L·ªói sync slash: {e}")

# ================== KHI NG∆Ø·ªúI M·ªöI THAM GIA ==================
@bot.event
async def on_member_join(member):
    channel = discord.utils.get(member.guild.text_channels, name="verify")
    if channel:
        await channel.send(
            f"üëã Ch√†o {member.mention}! Vui l√≤ng g√µ `/verify` ho·∫∑c `!verify` ƒë·ªÉ x√°c minh nh√©."
        )

# ================== L·ªÜNH PREFIX ==================
@bot.command()
async def verify(ctx):
    await start_verify(ctx.author, ctx.guild, prefix=True)

# ================== L·ªÜNH SLASH ==================
@bot.tree.command(name="verify", description="X√°c minh b·∫°n kh√¥ng ph·∫£i bot")
async def verify_slash(interaction: discord.Interaction):
    await interaction.response.send_message("üì© Ki·ªÉm tra DM ƒë·ªÉ x√°c minh!", ephemeral=True)
    await start_verify(interaction.user, interaction.guild, prefix=False)

# ================== H√ÄM CH√çNH X√ÅC MINH ==================
async def start_verify(user, guild, prefix=False):
    # t·∫°o ho·∫∑c t√¨m role Verified
    verified_role = discord.utils.get(guild.roles, name="‚úÖ Verified")
    if not verified_role:
        verified_role = await guild.create_role(name="‚úÖ Verified")

    # t·∫°o captcha
    captcha_text, captcha_img = generate_captcha()
    file = discord.File(fp=captcha_img, filename="captcha.png")

    try:
        await user.send("üîí Nh·∫≠p l·∫°i ch·ªØ trong ·∫£nh ƒë·ªÉ x√°c minh:", file=file)
    except discord.Forbidden:
        msg = "‚ùå Bot kh√¥ng th·ªÉ g·ª≠i DM. H√£y b·∫≠t tin nh·∫Øn ri√™ng trong server!"
        if prefix:
            ch = discord.utils.get(guild.text_channels, name="verify")
            if ch:
                await ch.send(f"{user.mention} {msg}")
        return

    def check_msg(m):
        return m.author == user and isinstance(m.channel, discord.DMChannel)

    try:
        msg = await bot.wait_for("message", check=check_msg, timeout=60)
        if msg.content.strip().upper() == captcha_text:
            await user.send("‚úÖ Ch√≠nh x√°c! B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c minh.")
            member = guild.get_member(user.id)
            if member:
                await member.add_roles(verified_role)
        else:
            await user.send("‚ùå Sai captcha. H√£y th·ª≠ l·∫°i `/verify`.")
    except asyncio.TimeoutError:
        await user.send("‚è∞ H·∫øt th·ªùi gian. G√µ `/verify` ƒë·ªÉ th·ª≠ l·∫°i.")

# ================== CH·∫†Y BOT ==================
if __name__ == "__main__":
    keep_alive()  # ch·∫°y Flask gi·ªØ bot s·ªëng
    TOKEN = os.getenv("TOKEN")
    if not TOKEN:
        print("‚ùå Thi·∫øu TOKEN! V√†o Secrets th√™m key=TOKEN value=<token bot>")
    else:
        bot.run(TOKEN)

