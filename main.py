from flask import Flask
from threading import Thread
import discord
from discord.ext import commands
import os
import random
import string
import base64
import asyncio

# Flask app for keeping bot alive
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# Kh·ªüi ch·∫°y Flask trong thread ri√™ng
flask_thread = Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()

# Discord Bot
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

def generate_encryption_key():
    """T·∫°o key m√£ h√≥a ng·∫´u nhi√™n"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

def xor_encrypt(data, key):
    """M√£ h√≥a d·ªØ li·ªáu b·∫±ng XOR"""
    encrypted = bytearray()
    key_bytes = key.encode()
    for i, byte in enumerate(data):
        encrypted.append(byte ^ key_bytes[i % len(key_bytes)])
    return bytes(encrypted)

def encrypt_lua_code(code, key):
    """M√£ h√≥a code Lua nh∆∞ng v·∫´n gi·ªØ code g·ªëc b√™n trong"""
    # M√£ h√≥a code
    encrypted_data = xor_encrypt(code.encode(), key)
    encrypted_b64 = base64.b64encode(encrypted_data).decode()
    
    # T·∫°o file .lua v·ªõi code g·ªëc ƒë∆∞·ª£c b·∫£o v·ªá b√™n trong
    protected_code = f'''-- File ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫£o v·ªá
-- Decryptor t·ª± ƒë·ªông

local encrypted_data = "{encrypted_b64}"
local encryption_key = "{key}"

local function base64_decode(data)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r, f = '', (b:find(x) - 1)
        for i = 6, 1, -1 do
            r = r .. (f % 2 ^ i - f % 2 ^ (i - 1) > 0 and '1' or '0')
        end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c = 0
        for i = 1, 8 do
            c = c + (x:sub(i, i) == '1' and 2 ^ (8 - i) or 0)
        end
        return string.char(c)
    end))
end

local function xor_decrypt(data, key)
    local result = ""
    local key_bytes = {{}}
    for i = 1, #key do
        key_bytes[i] = key:byte(i)
    end
    
    for i = 1, #data do
        local data_byte = data:byte(i)
        local key_byte = key_bytes[((i - 1) % #key_bytes) + 1]
        result = result .. string.char(data_byte ~ key_byte)
    end
    return result
end

-- Gi·∫£i m√£ v√† th·ª±c thi code g·ªëc
local function execute_original_code()
    local decoded_data = base64_decode(encrypted_data)
    local original_code = xor_decrypt(decoded_data, encryption_key)
    
    -- Th·ª±c thi code g·ªëc
    local loaded_function, error_msg = load(original_code)
    if loaded_function then
        loaded_function()
    else
        error("L·ªói khi th·ª±c thi code: " .. (error_msg or "unknown"))
    end
end

-- Ch·∫°y code g·ªëc
execute_original_code()

-- Code g·ªëc ƒë∆∞·ª£c b·∫£o v·ªá b√™n d∆∞·ªõi (ƒë√£ m√£ h√≥a)
-- Kh√¥ng th·ªÉ ƒë·ªçc tr·ª±c ti·∫øp m√† ph·∫£i th√¥ng qua gi·∫£i m√£
'''
    return protected_code

def create_protected_lua(code, key):
    """T·∫°o file Lua ƒë∆∞·ª£c b·∫£o v·ªá v·ªõi code g·ªëc b√™n trong"""
    # M√£ h√≥a code
    encrypted_data = xor_encrypt(code.encode(), key)
    encrypted_b64 = base64.b64encode(encrypted_data).decode()
    
    # T·∫°o file Lua v·ªõi c·∫•u tr√∫c b·∫£o v·ªá
    protected_code = f'''--[[
File ƒë∆∞·ª£c b·∫£o v·ªá - Protected File
M√£ h√≥a t·ª± ƒë·ªông b·ªüi Discord Bot
]]

local _G = _G
local string = string
local table = table
local load = load

-- D·ªØ li·ªáu m√£ h√≥a
local _E = "{encrypted_b64}"
local _K = "{key}"

-- H√†m gi·∫£i m√£
local function _D(d, k)
    local r = ""
    local kb = {{}}
    for i = 1, #k do kb[i] = k:byte(i) end
    for i = 1, #d do
        local b = d:byte(i)
        local kb = kb[((i-1) % #kb) + 1]
        r = r .. string.char(b ~ kb)
    end
    return r
end

-- H√†m decode base64
local function _B(d)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    d = string.gsub(d, '[^'..b..'=]', '')
    return (d:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f = '',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

-- Gi·∫£i m√£ v√† th·ª±c thi
local decoded = _B(_E)
local original = _D(decoded, _K)
local fn, err = load(original)
if fn then fn() else error(err or "Execution error") end

-- K·∫øt th√∫c file ƒë∆∞·ª£c b·∫£o v·ªá
'''
    return protected_code

@bot.event
async def on_ready():
    print(f'{bot.user} ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!')
    await bot.change_presence(activity=discord.Game(name="!mahoa ƒë·ªÉ m√£ h√≥a code"))
    
    try:
        synced = await bot.tree.sync()
        print(f"ƒê√£ ƒë·ªìng b·ªô {len(synced)} slash command(s)")
    except Exception as e:
        print(f"L·ªói ƒë·ªìng b·ªô slash commands: {e}")

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return
    await ctx.send(f"C√≥ l·ªói x·∫£y ra: {str(error)}")

@bot.command(name='mahoa')
async def encrypt_code(ctx):
    """L·ªánh m√£ h√≥a file code"""
    if not ctx.message.attachments:
        await ctx.send(" Vui l√≤ng g·ª≠i file code ƒë√≠nh k√®m khi s·ª≠ d·ª•ng l·ªánh `!mahoa`")
        return
    
    attachment = ctx.message.attachments[0]
    
    # Ki·ªÉm tra file type
    valid_extensions = ['.lua', '.txt', '.py', '.js', '.cpp', '.c', '.java', '.php', '.xml', '.json']
    if not any(attachment.filename.lower().endswith(ext) for ext in valid_extensions):
        await ctx.send(" File kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n file code")
        return
    
    try:
        wait_msg = await ctx.send(" ƒêang x·ª≠ l√Ω file...")
        
        # T·∫£i file
        file_content = await attachment.read()
        original_code = file_content.decode('utf-8')
        
        # T·∫°o key m√£ h√≥a
        encryption_key = generate_encryption_key()
        
        # T·∫°o file ƒë∆∞·ª£c b·∫£o v·ªá (gi·ªØ code g·ªëc b√™n trong)
        protected_lua_code = create_protected_lua(original_code, encryption_key)
        
        # T·∫°o t√™n file m·ªõi
        original_name = os.path.splitext(attachment.filename)[0]
        encrypted_filename = f"{original_name}_protected.lua"
        
        # L∆∞u file t·∫°m
        with open(encrypted_filename, 'w', encoding='utf-8') as f:
            f.write(protected_lua_code)
        
        # G·ª≠i file ƒë√£ m√£ h√≥a
        with open(encrypted_filename, 'rb') as f:
            file = discord.File(f, filename=encrypted_filename)
            embed = discord.Embed(
                title=" M√£ H√≥a Th√†nh C√¥ng",
                description=f"File `{attachment.filename}` ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá",
                color=0x00ff00
            )
            embed.add_field(
                name=" Th√¥ng tin",
                value="‚Ä¢ File g·ªëc ƒë∆∞·ª£c gi·ªØ nguy√™n b√™n trong\n‚Ä¢ C√≥ th·ªÉ ch·∫°y b√¨nh th∆∞·ªùng\n‚Ä¢ Code ƒë∆∞·ª£c b·∫£o v·ªá kh·ªèi ch·ªânh s·ª≠a",
                inline=False
            )
            await ctx.send(embed=embed, file=file)
        
        # X√≥a file t·∫°m
        os.remove(encrypted_filename)
        await wait_msg.delete()
        
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi x·ª≠ l√Ω file: {str(e)}")

@bot.command(name='ping')
async def ping(ctx):
    """Ki·ªÉm tra ƒë·ªô tr·ªÖ"""
    latency = round(bot.latency * 1000)
    await ctx.send(f' Ping! ƒê·ªô tr·ªÖ: {latency}ms')

@bot.command(name='trogiup')
async def help_command(ctx):
    """H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    help_text = """
**ü§ñ Bot B·∫£o V·ªá Code**

**L·ªánh:**
`!mahoa` - B·∫£o v·ªá file code (gi·ªØ nguy√™n code g·ªëc b√™n trong)
`!ping` - Ki·ªÉm tra ƒë·ªô tr·ªÖ
`!trogiup` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n

**ƒê·∫∑c ƒëi·ªÉm:**
‚Ä¢ File .lua ƒë∆∞·ª£c t·∫°o ra v·∫´n ch·ª©a code g·ªëc b√™n trong
‚Ä¢ Code g·ªëc ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá
‚Ä¢ File c√≥ th·ªÉ ch·∫°y b√¨nh th∆∞·ªùng v·ªõi Lua interpreter
‚Ä¢ B·∫£o v·ªá code kh·ªèi ch·ªânh s·ª≠a tr·ª±c ti·∫øp

**H·ªó tr·ª£ file:** .lua, .txt, .py, .js, .cpp, .c, .java, .php, .xml, .json
"""
    await ctx.send(help_text)

# Slash command support
@bot.tree.command(name="mahoa", description="B·∫£o v·ªá file code th√†nh file .lua (gi·ªØ code g·ªëc)")
async def slash_encrypt(interaction: discord.Interaction):
    """Slash command cho m√£ h√≥a"""
    await interaction.response.send_message("Vui l√≤ng g·ª≠i file code ƒë√≠nh k√®m khi s·ª≠ d·ª•ng l·ªánh n√†y. S·ª≠ d·ª•ng `!mahoa` v·ªõi file ƒë√≠nh k√®m.")

@bot.event
async def on_message(message):
    if message.content in ['/mahoa', '!mahoa'] and not message.attachments:
        await message.channel.send(" Vui l√≤ng g·ª≠i file code ƒë√≠nh k√®m khi s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    await bot.process_commands(message)

# Ch·∫°y bot v·ªõi token t·ª´ environment variable
if __name__ == "__main__":
    token = os.environ.get('TOKEN')
    if not token:
        print("L·ªói: TOKEN kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong environment variables!")
        exit(1)
    
    print("ü§ñ ƒêang kh·ªüi ƒë·ªông bot...")
    print("üåê Flask server ƒëang ch·∫°y tr√™n port 8080")
    bot.run(token)
